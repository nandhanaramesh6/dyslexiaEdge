<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Diss-lexia Accessibility Tool with Gemini Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Additional styles for toggle switch */
        .section-toggle + div:after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background-color: white;
            border-radius: 9999px;
            transition: all 0.3s ease;
        }
        .section-toggle:checked + div {
            background-color: #3B82F6;
        }
        .section-toggle:checked + div:after {
            transform: translateX(100%);
        }

        /* Chat styles */
        .chat-container {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .chat-header {
            background-color: #4285f4;
            color: white;
            padding: 15px;
            text-align: center;
            font-weight: bold;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }

        .message {
            margin-bottom: 15px;
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            position: relative;
            line-height: 1.5;
        }

        .user-message {
            background-color: #e3f2fd;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .ai-message {
            background-color: #f1f1f1;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }

        .chat-input {
            display: flex;
            padding: 15px;
            background-color: #f9f9f9;
            border-top: 1px solid #eee;
        }

        #message-input {
            flex: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }

        #send-button {
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 0 20px;
            margin-left: 10px;
            cursor: pointer;
        }

        .typing-indicator {
            display: none;
            margin-bottom: 15px;
        }

        .typing-indicator span {
            height: 10px;
            width: 10px;
            float: left;
            margin: 0 1px;
            background-color: #9E9EA1;
            display: block;
            border-radius: 50%;
            opacity: 0.4;
        }

        .typing-indicator span:nth-of-type(1) {
            animation: 1s blink infinite 0.3333s;
        }

        .typing-indicator span:nth-of-type(2) {
            animation: 1s blink infinite 0.6666s;
        }

        .typing-indicator span:nth-of-type(3) {
            animation: 1s blink infinite 0.9999s;
        }

        @keyframes blink {
            50% {
                opacity: 1;
            }
        }

        .api-key-container {
            margin-bottom: 20px;
        }

        #api-key {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-top: 5px;
        }
    </style>
</head>
<body class="flex h-screen m-0 font-sans">
    <div id="sidebar" class="w-[280px] bg-gray-100 p-5 shadow-md overflow-y-auto z-10">
        <h2 class="mb-5 text-gray-800 text-center pb-2 border-b border-gray-300">Diss-lexia Tools</h2>

        <div class="mb-5 p-4 bg-white rounded-lg shadow hover:-translate-y-0.5 transition-transform duration-200">
            <div class="flex justify-between items-center text-lg font-bold mb-2.5 text-gray-800">
                Dyslexic Font
                <label class="relative inline-flex items-center cursor-pointer">
                    <input id="FontToggle" type="checkbox" class="sr-only peer section-toggle" />
                    <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                </label>
            </div>
            <div class="content">
                <label for="fonttype" class="block my-2 text-sm text-gray-600">Font Style:</label>
                <select id="fonttype" name="fonttype" class="w-full p-2 my-1 border border-gray-300 rounded-md">
                    <option value="opendyslexic-regular">Regular</option>
                    <option value="opendyslexic-bold">Bold</option>
                    <option value="opendyslexic-italic">Italic</option>
                    <option value="opendyslexic-bolditalic">Bold-Italic</option>
                </select>

                <label class="block my-2 text-sm text-gray-600">
                    Font Size: <input id="fontsize-num" type="number" min="8" max="24" value="14" step="1" class="w-full p-2 my-1 border border-gray-300 rounded-md" /> pt
                </label>
                <input id="fontsize-slider" type="range" min="8" max="24" value="14" step="1" class="w-full my-2.5" />
            </div>
        </div>

        <div class="mb-5 p-4 bg-white rounded-lg shadow hover:-translate-y-0.5 transition-transform duration-200">
            <div class="flex justify-between items-center text-lg font-bold mb-2.5 text-gray-800">
                Reading Ruler
                <label class="relative inline-flex items-center cursor-pointer">
                    <input id="RulerToggle" type="checkbox" class="sr-only peer section-toggle" />
                    <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                </label>
            </div>
            <div class="content">
                <label class="block my-2 text-sm text-gray-600">
                    Height: <input id="ruler-height-num" type="number" min="10" max="100" value="24" step="1" class="w-full p-2 my-1 border border-gray-300 rounded-md" /> px
                </label>
                <input id="ruler-height-slider" type="range" min="10" max="100" value="24" step="1" class="w-full my-2.5" />
            </div>
        </div>

        <div class="mb-5 p-4 bg-white rounded-lg shadow hover:-translate-y-0.5 transition-transform duration-200">
            <div class="flex justify-between items-center text-lg font-bold mb-2.5 text-gray-800">
                Spacing Adjust
                <label class="relative inline-flex items-center cursor-pointer">
                    <input id="SpacingToggle" type="checkbox" class="sr-only peer section-toggle" />
                    <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                </label>
            </div>
            <div class="content">
                <label class="block my-2 text-sm text-gray-600">
                    Word Spacing: <input id="wordsp-num" type="number" min="0" max="1.5" value="0.5" step="0.1" class="w-full p-2 my-1 border border-gray-300 rounded-md" /> em
                </label>
                <input id="wordsp-slider" type="range" min="0" max="1.5" value="0.5" step="0.1" class="w-full my-2.5" />

                <label class="block my-2 text-sm text-gray-600">
                    Letter Spacing: <input id="lettersp-num" type="number" min="0" max="0.33" value="0.1" step="0.01" class="w-full p-2 my-1 border border-gray-300 rounded-md" /> em
                </label>
                <input id="lettersp-slider" type="range" min="0" max="0.33" value="0.1" step="0.01" class="w-full my-2.5" />
            </div>
        </div>

        <div class="mb-5 p-4 bg-white rounded-lg shadow hover:-translate-y-0.5 transition-transform duration-200">
            <div class="flex justify-between items-center text-lg font-bold mb-2.5 text-gray-800">
                Line Height Adjust
                <label class="relative inline-flex items-center cursor-pointer">
                    <input id="LineHtToggle" type="checkbox" class="sr-only peer section-toggle" />
                    <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                </label>
            </div>
            <div class="content">
                <label class="block my-2 text-sm text-gray-600">
                    Original Ã— <input id="lha-num" type="number" min="0.5" max="4" value="1.5" step="0.1" class="w-full p-2 my-1 border border-gray-300 rounded-md" />
                </label>
                <input id="lha-slider" type="range" min="1" max="4" value="1.5" step="0.1" class="w-full my-2.5" />
            </div>
        </div>

        <div class="mb-5 p-4 bg-white rounded-lg shadow hover:-translate-y-0.5 transition-transform duration-200">
            <div class="flex justify-between items-center text-lg font-bold mb-2.5 text-gray-800">
                ReadAloud
                <label class="relative inline-flex items-center cursor-pointer">
                    <input id="ReadAloud" type="checkbox" class="sr-only peer section-toggle" />
                    <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:bg-blue-600 after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                </label>
            </div>
            <div class="content">
                <p class="text-sm text-gray-600">Select text and it will be read automatically, or click the button below.</p>
                <button id="talk" class="bg-blue-500 text-white border-none py-2 px-4 rounded-md cursor-pointer text-sm mt-2.5 transition-colors duration-300 hover:bg-blue-600 active:scale-95">Read Selected Text</button>
            </div>
        </div>

        <div id="status" class="bg-green-500 text-white p-2.5 mt-5 rounded-md hidden text-center"></div>
    </div>

    <div id="content" class="flex-1 relative">
        <div id="content-area" class="w-full h-full p-4 overflow-auto bg-white border border-gray-300">
            <div class="chat-container">
                <div class="chat-header">
                    Chat with AI
                </div>
                <div class="chat-messages" id="chat-messages">
                    <div class="message ai-message">
                        Hello! I'm  AI. How can I help you today?
                    </div>

                    <div class="typing-indicator" id="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
                <div class="chat-input">
                    <input type="text" id="message-input" placeholder="Type your message here...">
                    <button id="send-button">Send</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Font face declarations
        const fontFaceStyle = document.createElement('style');
        fontFaceStyle.textContent = `
            @font-face {
                font-family: "opendyslexic-regular";
                src: url('https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/otf/OpenDyslexic-Regular.otf') format('opentype');
                font-style: normal;
                font-weight: normal;
            }

            @font-face {
                font-family: 'opendyslexic-italic';
                src: url('https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/otf/OpenDyslexic-Italic.otf') format('opentype');
                font-style: italic;
                font-weight: normal;
            }

            @font-face {
                font-family: 'opendyslexic-bold';
                src: url('https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/otf/OpenDyslexic-Bold.otf') format('opentype');
                font-weight: bold;
                font-style: normal;
            }

            @font-face {
                font-family: 'opendyslexic-bolditalic';
                src: url('https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/otf/OpenDyslexic-BoldItalic.otf') format('opentype');
                font-weight: bold;
                font-style: italic;
            }
        `;
        document.head.appendChild(fontFaceStyle);

        // Initialize toggle states
        function initializeToggles() {
            const toggles = document.querySelectorAll(".section-toggle");

            toggles.forEach((toggle) => {
                // Get the corresponding section
                const section = toggle.closest('div[class*="bg-white"]');

                // Add change event listener
                toggle.addEventListener("change", (event) => {
                    const isChecked = event.target.checked;

                    // Update visual state
                    if (isChecked) {
                        section.classList.add("border-l-4", "border-l-blue-500");
                    } else {
                        section.classList.remove("border-l-4", "border-l-blue-500");
                    }

                    // Apply settings
                    applySettings();
                });
            });
        }

        // Comprehensive reset function
        function resetStyles(element) {
            element.style.fontFamily = "";
            element.style.fontSize = "";
            element.style.fontWeight = "";
            element.style.fontStyle = "";
            element.style.wordSpacing = "";
            element.style.letterSpacing = "";
            element.style.lineHeight = "";
        }

        function applyFont(element, attr, value) {
            element.style[attr] = value;
        }

        function applySpacing(element, attr, value) {
            element.style[attr] = value;
        }

        function applyLineHeight(element, value) {
            element.style.lineHeight = value;
        }

        function createRuler(active, height) {
            const contentArea = document.getElementById('content-area');
            let ruler = document.getElementById('readingRuler');

            if (!ruler) {
                ruler = document.createElement("div");
                ruler.id = "readingRuler";
                ruler.style.position = "absolute";
                ruler.style.width = "100%";
                ruler.style.backgroundColor = "yellow";
                ruler.style.pointerEvents = "none";
                ruler.style.zIndex = "9999";
                ruler.style.transition = "top 0.05s ease";
                contentArea.style.position = "relative";
                contentArea.appendChild(ruler);

                // Mouse tracking
                contentArea.addEventListener('mousemove', function(e) {
                    const rulerElement = document.getElementById('readingRuler');
                    if (rulerElement && document.getElementById('RulerToggle').checked) {
                        const rect = contentArea.getBoundingClientRect();
                        rulerElement.style.top = (e.clientY - rect.top - height/2) + 'px';
                    }
                });
            }

            if (active) {
                ruler.style.height = `${height}px`;
                ruler.style.opacity = 0.2;
                ruler.style.display = "block";
            } else {
                ruler.style.opacity = 0;
                ruler.style.display = "none";
            }
        }

        function applySettings() {
            const contentArea = document.getElementById('content-area');
            const messageArea = document.getElementById('chat-messages');
            const messages = document.querySelectorAll('.message');
            // Reset all styles first
            // resetStyles(contentArea);
            resetStyles(messageArea);
            resetStyles(document.body);
            // Font Setting
            if (document.getElementById('FontToggle').checked) {
                // applyFont(contentArea, "fontFamily", document.getElementById('fonttype').value);
                applyFont(document.body, "fontFamily", document.getElementById('fonttype').value);
                applyFont(contentArea, "fontSize", `${document.getElementById('fontsize-num').value}px`);
                showStatus("Applied dyslexic font");
            }

            // Spacing Setting
            if (document.getElementById('SpacingToggle').checked) {
                // applySpacing(contentArea, "wordSpacing", `${document.getElementById('wordsp-num').value}em`);
                // applySpacing(contentArea, "letterSpacing", `${document.getElementById('lettersp-num').value}em`);
                applySpacing(messageArea, "wordSpacing", `${document.getElementById('wordsp-num').value}em`);
                applySpacing(messageArea, "letterSpacing", `${document.getElementById('lettersp-num').value}em`);
                showStatus("Applied text spacing");
            }

            // Reading Ruler Setting
            if (document.getElementById('RulerToggle').checked) {
                createRuler(
                    true,
                    document.getElementById('ruler-height-num').value
                );
            } else {
                createRuler(false, 0);
            }

            // Line Height Setting
            if (document.getElementById('LineHtToggle').checked) {
                // applyLineHeight(contentArea, document.getElementById('lha-num').value);
                // applyLineHeight(message, document.getElementById('lha-num').value);
                messages.forEach(message => {
                    applyLineHeight(message, document.getElementById('lha-num').value);
                });
                showStatus("Applied line height adjustment");
            }

            // Read Aloud Setting
            setupReadAloud(document.getElementById('ReadAloud').checked);
        }

        function setupReadAloud(active) {
            const contentArea = document.getElementById('content-area');

            // Remove previous event listener if it exists
            if (contentArea._readAloudHandler) {
                contentArea.removeEventListener('mouseup', contentArea._readAloudHandler);
            }

            if (active) {
                // Create a handler function
                contentArea._readAloudHandler = function() {
                    const selectedText = window.getSelection().toString();
                    if (selectedText && document.getElementById('ReadAloud').checked) {
                        speak(selectedText);
                    }
                };

                contentArea.addEventListener('mouseup', contentArea._readAloudHandler);
            }
        }

        function getSelectedText() {
            return window.getSelection().toString();
        }

        function speak(selectedText) {
            if (!selectedText || selectedText.trim() === '') {
                showStatus("Please select some text to read aloud.", true);
                return;
            }

            const utterance = new SpeechSynthesisUtterance(selectedText);
            utterance.pitch = 1;
            utterance.rate = 1;
            utterance.volume = 1;
            window.speechSynthesis.speak(utterance);
            showStatus("Reading text aloud...");
        }

        function showStatus(message, isError = false) {
            const statusElement = document.getElementById('status');
            statusElement.textContent = message;
            statusElement.style.display = 'block';

            if (isError) {
                statusElement.classList.remove('bg-green-500');
                statusElement.classList.add('bg-red-500');
            } else {
                statusElement.classList.remove('bg-red-500');
                statusElement.classList.add('bg-green-500');
            }

            // Auto-hide after 3 seconds
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 3000);
        }

        // Event listeners for controls
        document.querySelector('select[name=fonttype]').addEventListener('change', event => {
            if (document.getElementById('FontToggle').checked) {
                applyFont(document.getElementById('content-area'), "fontFamily", event.target.value);
                showStatus("Font style updated");
            }
        });

        // Font size controls
        document.querySelector('#fontsize-num').addEventListener('input', function(event) {
            document.querySelector('#fontsize-slider').value = event.target.value;
            if (document.getElementById('FontToggle').checked) {
                applyFont(document.getElementById('content-area'), "fontSize", `${event.target.value}px`);
            }
        });

        document.querySelector('#fontsize-slider').addEventListener('input', function(event) {
            document.querySelector('#fontsize-num').value = event.target.value;
            if (document.getElementById('FontToggle').checked) {
                applyFont(document.getElementById('content-area'), "fontSize", `${event.target.value}px`);
            }
        });

        // Line height controls
        document.querySelector('#lha-num').addEventListener('input', function(event) {
            document.querySelector('#lha-slider').value = event.target.value;
            if (document.getElementById('LineHtToggle').checked) {
                const messages = document.querySelectorAll('.message');
                messages.forEach(message => {
                    applyLineHeight(message, event.target.value);
                });
            }
        });

        document.querySelector('#lha-slider').addEventListener('input', function(event) {
            document.querySelector('#lha-num').value = event.target.value;
            if (document.getElementById('LineHtToggle').checked) {
                const messages = document.querySelectorAll('.message');
                messages.forEach(message => {
                    applyLineHeight(message, event.target.value);
                });
            }
        });

        // Ruler height controls
        document.querySelector('#ruler-height-num').addEventListener('input', function(event) {
            document.querySelector('#ruler-height-slider').value = event.target.value;
            if (document.getElementById('RulerToggle').checked) {
                createRuler(true, event.target.value);
            }
        });

        document.querySelector('#ruler-height-slider').addEventListener('input', function(event) {
            document.querySelector('#ruler-height-num').value = event.target.value;
            if (document.getElementById('RulerToggle').checked) {
                createRuler(true, event.target.value);
            }
        });

        // Word spacing controls
        document.querySelector('#wordsp-num').addEventListener('input', function(event) {
            document.querySelector('#wordsp-slider').value = event.target.value;
            if (document.getElementById('SpacingToggle').checked) {
                applySpacing(document.getElementById('chat-messages'), "wordSpacing", `${event.target.value}em`);
            }
        });

        document.querySelector('#wordsp-slider').addEventListener('input', function(event) {
            document.querySelector('#wordsp-num').value = event.target.value;
            if (document.getElementById('SpacingToggle').checked) {
                applySpacing(document.getElementById('chat-messages'), "wordSpacing", `${event.target.value}em`);
            }
        });

        // Letter spacing controls
        document.querySelector('#lettersp-num').addEventListener('input', function(event) {
            document.querySelector('#lettersp-slider').value = event.target.value;
            if (document.getElementById('SpacingToggle').checked) {
                applySpacing(document.getElementById('chat-messages'), "letterSpacing", `${event.target.value}em`);
            }
        });

        document.querySelector('#lettersp-slider').addEventListener('input', function(event) {
            document.querySelector('#lettersp-num').value = event.target.value;
            if (document.getElementById('SpacingToggle').checked) {
                applySpacing(document.getElementById('chat-messages'), "letterSpacing", `${event.target.value}em`);
            }
        });

        // Read Aloud button
        document.getElementById('talk').addEventListener('click', () => {
            if (document.getElementById('ReadAloud').checked) {
                const selectedText = getSelectedText();
                speak(selectedText);
            }
        });

        // Chat functionality
        document.addEventListener('DOMContentLoaded', function() {
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');
            const chatMessages = document.getElementById('chat-messages');
            const typingIndicator = document.getElementById('typing-indicator');
            // const apiKeyInput = document.getElementById('api-key');

            let conversationHistory = [];

            // Submit with Enter key
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            // Send button click
            sendButton.addEventListener('click', sendMessage);

            function sendMessage() {
                const message = messageInput.value.trim();
                const apiKey = '<%= process.env.GEMINI_API_KEY %>';

                if (message === '') return;

                // Add user message to chat
                addMessage(message, 'user');
                messageInput.value = '';

                // Show typing indicator
                typingIndicator.style.display = 'block';

                // Add user message to history
                conversationHistory.push({
                    role: "user",
                    parts: [{ text: message }]
                });

                // Call Gemini API
                fetchGeminiResponse(message, apiKey);
            }

            async function fetchGeminiResponse(message, apiKey) {
                if (!apiKey) {
                    typingIndicator.style.display = 'none';
                    addMessage("Please enter your Gemini API key to continue.", 'ai');
                    return;
                }

                try {
                    const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
                    const response = await fetch(`${url}?key=${apiKey}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            contents: conversationHistory
                        })
                    });

                    const data = await response.json();

                    // Hide typing indicator
                    typingIndicator.style.display = 'none';

                    if (data.error) {
                        addMessage(`Error: ${data.error.message}`, 'ai');
                        return;
                    }

                    // Get AI response
                    const aiResponse = data.candidates[0].content.parts[0].text;

                    // Add AI response to chat
                    addMessage(aiResponse, 'ai');

                    // Add AI response to history
                    conversationHistory.push({
                        role: "model",
                        parts: [{ text: aiResponse }]
                    });

                } catch (error) {
                    console.error('Error:', error);
                    typingIndicator.style.display = 'none';
                    addMessage('Sorry, there was an error connecting to the Gemini API. Please check your API key and try again.', 'ai');
                }
            }

            function addMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                messageDiv.classList.add(sender === 'user' ? 'user-message' : 'ai-message');
                messageDiv.textContent = text;

                // Add before typing indicator
                chatMessages.insertBefore(messageDiv, typingIndicator);

                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        });

        // Initial setup
        window.addEventListener('load', () => {
            initializeToggles();
            applySettings();
        });
    </script>
</body>
</html>
